/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace ReleaseApp.Updater.Model
{
    /// <summary>
    /// AppVersion
    /// </summary>
    [DataContract(Name = "AppVersion")]
    public partial class AppVersion : IEquatable<AppVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppVersion" /> class.
        /// </summary>
        /// <param name="minor">minor (required).</param>
        /// <param name="major">major (required).</param>
        /// <param name="revision">revision (required).</param>
        public AppVersion(int minor = default(int), int major = default, int revision = default(int))
        {
            Minor = minor;
            Major = major;
            Revision = revision;
        }

        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [DataMember(Name = "minor", IsRequired = true, EmitDefaultValue = false)]
        public int Minor { get; set; }

        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name = "major", IsRequired = true, EmitDefaultValue = false)]
        public int Major { get; set; }

        /// <summary>
        /// Gets or Sets Revision
        /// </summary>
        [DataMember(Name = "revision", IsRequired = true, EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        [DataMember(Name = "raw", IsRequired = true, EmitDefaultValue = false)]
        public string Raw => $"{Major}.{Minor}.{Revision}";

        /// <summary>
        /// Returns false as Raw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRaw()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppVersion {\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AppVersion);
        }

        /// <summary>
        /// Returns true if AppVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of AppVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppVersion input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    Minor == input.Minor ||
                    Minor.Equals(input.Minor)
                ) &&
                (
                    Major == input.Major ||
                    Major.Equals(input.Major)
                ) &&
                (
                    Revision == input.Revision ||
                    Revision.Equals(input.Revision)
                ) &&
                (
                    Raw == input.Raw ||
                    (Raw != null &&
                    Raw.Equals(input.Raw))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Minor.GetHashCode();
                hashCode = (hashCode * 59) + Major.GetHashCode();
                hashCode = (hashCode * 59) + Revision.GetHashCode();
                if (Raw != null)
                {
                    hashCode = (hashCode * 59) + Raw.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }

        public AppVersion Clone()
        {
            return new AppVersion
            {
                Major = Major,
                Minor = Minor,
                Revision = Revision
            };
        }
    }

}