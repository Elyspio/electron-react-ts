/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace ReleaseApp.Updater.Model
{
    /// <summary>
    /// AddApp
    /// </summary>
    [DataContract(Name = "AddApp")]
    public partial class AddApp : IEquatable<AddApp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddApp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddApp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddApp" /> class.
        /// </summary>
        /// <param name="binary">binary (required).</param>
        /// <param name="metadata">metadata (required).</param>
        public AddApp(List<int> binary = default(List<int>), AppMetadata metadata = default(AppMetadata))
        {
            // to ensure "binary" is required (not null)
            if (binary == null)
            {
                throw new ArgumentNullException("binary is a required property for AddApp and cannot be null");
            }
            Binary = binary;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for AddApp and cannot be null");
            }
            Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [DataMember(Name = "binary", IsRequired = true, EmitDefaultValue = false)]
        public List<int> Binary { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = false)]
        public AppMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddApp {\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AddApp);
        }

        /// <summary>
        /// Returns true if AddApp instances are equal
        /// </summary>
        /// <param name="input">Instance of AddApp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddApp input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    Binary == input.Binary ||
                    Binary != null &&
                    input.Binary != null &&
                    Binary.SequenceEqual(input.Binary)
                ) &&
                (
                    Metadata == input.Metadata ||
                    (Metadata != null &&
                    Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Binary != null)
                {
                    hashCode = (hashCode * 59) + Binary.GetHashCode();
                }
                if (Metadata != null)
                {
                    hashCode = (hashCode * 59) + Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}