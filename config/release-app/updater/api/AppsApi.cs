/*
 * Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ReleaseApp.Updater.Client;
using ReleaseApp.Updater.Model;

namespace ReleaseApp.Updater.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <returns></returns>
        void Add(AddApp addApp);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWithHttpInfo(AddApp addApp);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns></returns>
        void Delete(string name, string version, AppArch arch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string name, string version, AppArch arch);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>List&lt;AppMetadata&gt;</returns>
        List<AppMetadata> GetAllMetadata(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of List&lt;AppMetadata&gt;</returns>
        ApiResponse<List<AppMetadata>> GetAllMetadataWithHttpInfo(string name);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetApps();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetAppsWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns>Object</returns>
        Object GetBinary(string name, string version, AppArch arch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetBinaryWithHttpInfo(string name, string version, AppArch arch);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <returns>AppVersion</returns>
        AppVersion GetLatestArchSpecificVersion(string name, AppArch arch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <returns>ApiResponse of AppVersion</returns>
        ApiResponse<AppVersion> GetLatestArchSpecificVersionWithHttpInfo(string name, AppArch arch);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Dictionary&lt;string, List&lt;AppVersion&gt;&gt;</returns>
        Dictionary<string, List<AppVersion>> GetLatestVersions(string name);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;AppVersion&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<AppVersion>>> GetLatestVersionsWithHttpInfo(string name);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAsync(AddApp addApp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWithHttpInfoAsync(AddApp addApp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AppMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<AppMetadata>> GetAllMetadataAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AppMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AppMetadata>>> GetAllMetadataWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetAppsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetAppsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetBinaryAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetBinaryWithHttpInfoAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppVersion</returns>
        System.Threading.Tasks.Task<AppVersion> GetLatestArchSpecificVersionAsync(string name, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppVersion>> GetLatestArchSpecificVersionWithHttpInfoAsync(string name, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;AppVersion&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<AppVersion>>> GetLatestVersionsAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;AppVersion&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<AppVersion>>>> GetLatestVersionsWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppsApi : IAppsApiSync, IAppsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppsApi : IDisposable, IAppsApi
    {
        private ReleaseApp.Updater.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AppsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AppsApi(string basePath)
        {
            Configuration = ReleaseApp.Updater.Client.Configuration.MergeConfigurations(
                ReleaseApp.Updater.Client.GlobalConfiguration.Instance,
                new ReleaseApp.Updater.Client.Configuration { BasePath = basePath }
            );
            ApiClient = new ReleaseApp.Updater.Client.ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ReleaseApp.Updater.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AppsApi(ReleaseApp.Updater.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = ReleaseApp.Updater.Client.Configuration.MergeConfigurations(
                ReleaseApp.Updater.Client.GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ReleaseApp.Updater.Client.ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ReleaseApp.Updater.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            Configuration = ReleaseApp.Updater.Client.Configuration.MergeConfigurations(
                ReleaseApp.Updater.Client.GlobalConfiguration.Instance,
                new ReleaseApp.Updater.Client.Configuration { BasePath = basePath }
            );
            ApiClient = new ReleaseApp.Updater.Client.ApiClient(client, Configuration.BasePath, handler);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ReleaseApp.Updater.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AppsApi(HttpClient client, ReleaseApp.Updater.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            Configuration = ReleaseApp.Updater.Client.Configuration.MergeConfigurations(
                ReleaseApp.Updater.Client.GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ReleaseApp.Updater.Client.ApiClient(client, Configuration.BasePath, handler);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = ReleaseApp.Updater.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AppsApi(ReleaseApp.Updater.Client.ISynchronousClient client, ReleaseApp.Updater.Client.IAsynchronousClient asyncClient, ReleaseApp.Updater.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ReleaseApp.Updater.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ReleaseApp.Updater.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ReleaseApp.Updater.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ReleaseApp.Updater.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ReleaseApp.Updater.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ReleaseApp.Updater.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <returns></returns>
        public void Add(AddApp addApp)
        {
            AddWithHttpInfo(addApp);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ReleaseApp.Updater.Client.ApiResponse<Object> AddWithHttpInfo(AddApp addApp)
        {
            // verify the required parameter 'addApp' is set
            if (addApp == null)
                throw new ReleaseApp.Updater.Client.ApiException(400, "Missing required parameter 'addApp' when calling AppsApi->Add");

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addApp;


            // make the HTTP request
            var localVarResponse = Client.Post<Object>("/api/apps", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("Add", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAsync(AddApp addApp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddWithHttpInfoAsync(addApp, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addApp"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<Object>> AddWithHttpInfoAsync(AddApp addApp, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addApp' is set
            if (addApp == null)
                throw new ReleaseApp.Updater.Client.ApiException(400, "Missing required parameter 'addApp' when calling AppsApi->Add");


            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addApp;


            // make the HTTP request

            var localVarResponse = await AsynchronousClient.PostAsync<Object>("/api/apps", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("Add", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns></returns>
        public void Delete(string name, string version, AppArch arch)
        {
            DeleteWithHttpInfo(name, version, arch);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ReleaseApp.Updater.Client.ApiResponse<Object> DeleteWithHttpInfo(string name, string version, AppArch arch)
        {
            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.PathParameters.Add("arch", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(arch)); // path parameter


            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/api/apps/{name}/{arch}/{version}", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("Delete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(name, version, arch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.PathParameters.Add("arch", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(arch)); // path parameter


            // make the HTTP request

            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/api/apps/{name}/{arch}/{version}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("Delete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>List&lt;AppMetadata&gt;</returns>
        public List<AppMetadata> GetAllMetadata(string name)
        {
            ReleaseApp.Updater.Client.ApiResponse<List<AppMetadata>> localVarResponse = GetAllMetadataWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of List&lt;AppMetadata&gt;</returns>
        public ReleaseApp.Updater.Client.ApiResponse<List<AppMetadata>> GetAllMetadataWithHttpInfo(string name)
        {
            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = Client.Get<List<AppMetadata>>("/api/apps/{name}", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetAllMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AppMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<AppMetadata>> GetAllMetadataAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ReleaseApp.Updater.Client.ApiResponse<List<AppMetadata>> localVarResponse = await GetAllMetadataWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AppMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<List<AppMetadata>>> GetAllMetadataWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<AppMetadata>>("/api/apps/{name}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetAllMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetApps()
        {
            ReleaseApp.Updater.Client.ApiResponse<List<string>> localVarResponse = GetAppsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ReleaseApp.Updater.Client.ApiResponse<List<string>> GetAppsWithHttpInfo()
        {
            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = Client.Get<List<string>>("/api/apps", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetAppsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ReleaseApp.Updater.Client.ApiResponse<List<string>> localVarResponse = await GetAppsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<List<string>>> GetAppsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<List<string>>("/api/apps", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns>Object</returns>
        public Object GetBinary(string name, string version, AppArch arch)
        {
            ReleaseApp.Updater.Client.ApiResponse<Object> localVarResponse = GetBinaryWithHttpInfo(name, version, arch);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <returns>ApiResponse of Object</returns>
        public ReleaseApp.Updater.Client.ApiResponse<Object> GetBinaryWithHttpInfo(string name, string version, AppArch arch)
        {
            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.PathParameters.Add("arch", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(arch)); // path parameter


            // make the HTTP request
            var localVarResponse = Client.Get<Object>("/api/apps/{name}/{arch}/{version}", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetBinaryAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ReleaseApp.Updater.Client.ApiResponse<Object> localVarResponse = await GetBinaryWithHttpInfoAsync(name, version, arch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<Object>> GetBinaryWithHttpInfoAsync(string name, string version, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.PathParameters.Add("arch", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(arch)); // path parameter


            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<Object>("/api/apps/{name}/{arch}/{version}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetBinary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <returns>AppVersion</returns>
        public AppVersion GetLatestArchSpecificVersion(string name, AppArch arch)
        {
            ReleaseApp.Updater.Client.ApiResponse<AppVersion> localVarResponse = GetLatestArchSpecificVersionWithHttpInfo(name, arch);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <returns>ApiResponse of AppVersion</returns>
        public ReleaseApp.Updater.Client.ApiResponse<AppVersion> GetLatestArchSpecificVersionWithHttpInfo(string name, AppArch arch)
        {
            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("arch", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(arch)); // path parameter


            // make the HTTP request
            var localVarResponse = Client.Get<AppVersion>("/api/apps/{name}/{arch}/version", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetLatestArchSpecificVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppVersion</returns>
        public async System.Threading.Tasks.Task<AppVersion> GetLatestArchSpecificVersionAsync(string name, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ReleaseApp.Updater.Client.ApiResponse<AppVersion> localVarResponse = await GetLatestArchSpecificVersionWithHttpInfoAsync(name, arch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="arch"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppVersion)</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<AppVersion>> GetLatestArchSpecificVersionWithHttpInfoAsync(string name, AppArch arch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("arch", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(arch)); // path parameter


            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<AppVersion>("/api/apps/{name}/{arch}/version", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetLatestArchSpecificVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Dictionary&lt;string, List&lt;AppVersion&gt;&gt;</returns>
        public Dictionary<string, List<AppVersion>> GetLatestVersions(string name)
        {
            ReleaseApp.Updater.Client.ApiResponse<Dictionary<string, List<AppVersion>>> localVarResponse = GetLatestVersionsWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;AppVersion&gt;&gt;</returns>
        public ReleaseApp.Updater.Client.ApiResponse<Dictionary<string, List<AppVersion>>> GetLatestVersionsWithHttpInfo(string name)
        {
            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request
            var localVarResponse = Client.Get<Dictionary<string, List<AppVersion>>>("/api/apps/{name}/version", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetLatestVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;AppVersion&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<AppVersion>>> GetLatestVersionsAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ReleaseApp.Updater.Client.ApiResponse<Dictionary<string, List<AppVersion>>> localVarResponse = await GetLatestVersionsWithHttpInfoAsync(name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ReleaseApp.Updater.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;AppVersion&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ReleaseApp.Updater.Client.ApiResponse<Dictionary<string, List<AppVersion>>>> GetLatestVersionsWithHttpInfoAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ReleaseApp.Updater.Client.RequestOptions localVarRequestOptions = new ReleaseApp.Updater.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };


            var localVarContentType = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ReleaseApp.Updater.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", ReleaseApp.Updater.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var localVarResponse = await AsynchronousClient.GetAsync<Dictionary<string, List<AppVersion>>>("/api/apps/{name}/version", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory("GetLatestVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}